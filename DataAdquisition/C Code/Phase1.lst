CCS PCH C Compiler, Version 5.083, 13314               25-jul-22 05:50

               Filename:   C:\Users\BrainW7\Documents\BM Documents\ELECTRONIC\ELECTRONIC DESING\DataAdquisitionCard\DataAdquisition\C Code\Phase1.lst

               ROM used:   2074 bytes (6%)
                           Largest free fragment is 30694
               RAM used:   25 (1%) at main() level
                           49 (2%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   058A
.................... #Include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
0018:  DATA 0C,00
001A:  DATA 41,44
001C:  DATA 43,3A
001E:  DATA 20,25
0020:  DATA 66,00
0022:  DATA 41,44
0024:  DATA 43,3A
0026:  DATA 20,25
0028:  DATA 66,00
002A:  DATA 41,44
002C:  DATA 43,3A
002E:  DATA 20,25
0030:  DATA 66,00
0032:  DATA 41,44
0034:  DATA 43,3A
0036:  DATA 20,25
0038:  DATA 66,00
*
013E:  MOVLW  8E
0140:  MOVWF  00
0142:  MOVFF  1A,01
0146:  MOVFF  19,02
014A:  CLRF   03
014C:  MOVF   01,F
014E:  BNZ   0162
0150:  MOVFF  02,01
0154:  CLRF   02
0156:  MOVLW  08
0158:  SUBWF  00,F
015A:  MOVF   01,F
015C:  BNZ   0162
015E:  CLRF   00
0160:  BRA    0172
0162:  BCF    FD8.0
0164:  BTFSC  01.7
0166:  BRA    0170
0168:  RLCF   02,F
016A:  RLCF   01,F
016C:  DECF   00,F
016E:  BRA    0162
0170:  BCF    01.7
0172:  RETURN 0
0174:  MOVF   24,W
0176:  BTFSC  FD8.2
0178:  BRA    025C
017A:  MOVWF  00
017C:  MOVF   28,W
017E:  BTFSC  FD8.2
0180:  BRA    025C
0182:  ADDWF  00,F
0184:  BNC   018E
0186:  MOVLW  81
0188:  ADDWF  00,F
018A:  BC    025C
018C:  BRA    0196
018E:  MOVLW  7F
0190:  SUBWF  00,F
0192:  BNC   025C
0194:  BZ    025C
0196:  MOVFF  25,2C
019A:  MOVF   29,W
019C:  XORWF  2C,F
019E:  BSF    25.7
01A0:  BSF    29.7
01A2:  MOVF   27,W
01A4:  MULWF  2B
01A6:  MOVFF  FF4,2E
01AA:  MOVF   26,W
01AC:  MULWF  2A
01AE:  MOVFF  FF4,03
01B2:  MOVFF  FF3,2D
01B6:  MULWF  2B
01B8:  MOVF   FF3,W
01BA:  ADDWF  2E,F
01BC:  MOVF   FF4,W
01BE:  ADDWFC 2D,F
01C0:  MOVLW  00
01C2:  ADDWFC 03,F
01C4:  MOVF   27,W
01C6:  MULWF  2A
01C8:  MOVF   FF3,W
01CA:  ADDWF  2E,F
01CC:  MOVF   FF4,W
01CE:  ADDWFC 2D,F
01D0:  MOVLW  00
01D2:  CLRF   02
01D4:  ADDWFC 03,F
01D6:  ADDWFC 02,F
01D8:  MOVF   25,W
01DA:  MULWF  2B
01DC:  MOVF   FF3,W
01DE:  ADDWF  2D,F
01E0:  MOVF   FF4,W
01E2:  ADDWFC 03,F
01E4:  MOVLW  00
01E6:  ADDWFC 02,F
01E8:  MOVF   25,W
01EA:  MULWF  2A
01EC:  MOVF   FF3,W
01EE:  ADDWF  03,F
01F0:  MOVF   FF4,W
01F2:  ADDWFC 02,F
01F4:  MOVLW  00
01F6:  CLRF   01
01F8:  ADDWFC 01,F
01FA:  MOVF   27,W
01FC:  MULWF  29
01FE:  MOVF   FF3,W
0200:  ADDWF  2D,F
0202:  MOVF   FF4,W
0204:  ADDWFC 03,F
0206:  MOVLW  00
0208:  ADDWFC 02,F
020A:  ADDWFC 01,F
020C:  MOVF   26,W
020E:  MULWF  29
0210:  MOVF   FF3,W
0212:  ADDWF  03,F
0214:  MOVF   FF4,W
0216:  ADDWFC 02,F
0218:  MOVLW  00
021A:  ADDWFC 01,F
021C:  MOVF   25,W
021E:  MULWF  29
0220:  MOVF   FF3,W
0222:  ADDWF  02,F
0224:  MOVF   FF4,W
0226:  ADDWFC 01,F
0228:  INCF   00,F
022A:  BTFSC  01.7
022C:  BRA    0238
022E:  RLCF   2D,F
0230:  RLCF   03,F
0232:  RLCF   02,F
0234:  RLCF   01,F
0236:  DECF   00,F
0238:  MOVLW  00
023A:  BTFSS  2D.7
023C:  BRA    0252
023E:  INCF   03,F
0240:  ADDWFC 02,F
0242:  ADDWFC 01,F
0244:  MOVF   01,W
0246:  BNZ   0252
0248:  MOVF   02,W
024A:  BNZ   0252
024C:  MOVF   03,W
024E:  BNZ   0252
0250:  INCF   00,F
0252:  BTFSC  2C.7
0254:  BSF    01.7
0256:  BTFSS  2C.7
0258:  BCF    01.7
025A:  BRA    0264
025C:  CLRF   00
025E:  CLRF   01
0260:  CLRF   02
0262:  CLRF   03
0264:  RETURN 0
*
029A:  ADDWF  FE8,W
029C:  CLRF   FF7
029E:  RLCF   FF7,F
02A0:  ADDLW  B5
02A2:  MOVWF  FF6
02A4:  MOVLW  02
02A6:  ADDWFC FF7,F
02A8:  TBLRD*-
02AA:  MOVF   FF5,W
02AC:  MOVWF  FFA
02AE:  TBLRD*
02B0:  MOVF   FF5,W
02B2:  MOVWF  FF9
02B4:  DATA 74,02
02B6:  DATA 7A,02
02B8:  DATA 80,02
02BA:  DATA 86,02
*
0304:  TBLRD*+
0306:  MOVF   FF5,F
0308:  BZ    0322
030A:  MOVFF  FF6,17
030E:  MOVFF  FF7,18
0312:  MOVFF  FF5,24
0316:  RCALL  02BC
0318:  MOVFF  17,FF6
031C:  MOVFF  18,FF7
0320:  BRA    0304
0322:  GOTO   074A (RETURN)
0326:  TBLRD*+
0328:  MOVFF  FF6,18
032C:  MOVFF  FF7,19
0330:  MOVFF  FF5,24
0334:  RCALL  02BC
0336:  MOVFF  18,FF6
033A:  MOVFF  19,FF7
033E:  DECFSZ 17,F
0340:  BRA    0326
0342:  RETURN 0
0344:  MOVF   24,W
0346:  SUBLW  B6
0348:  MOVWF  24
034A:  CLRF   03
034C:  MOVFF  25,28
0350:  BSF    25.7
0352:  BCF    FD8.0
0354:  RRCF   25,F
0356:  RRCF   26,F
0358:  RRCF   27,F
035A:  RRCF   03,F
035C:  RRCF   02,F
035E:  RRCF   01,F
0360:  RRCF   00,F
0362:  DECFSZ 24,F
0364:  BRA    0352
0366:  BTFSS  28.7
0368:  BRA    0380
036A:  COMF   00,F
036C:  COMF   01,F
036E:  COMF   02,F
0370:  COMF   03,F
0372:  INCF   00,F
0374:  BTFSC  FD8.2
0376:  INCF   01,F
0378:  BTFSC  FD8.2
037A:  INCF   02,F
037C:  BTFSC  FD8.2
037E:  INCF   03,F
0380:  GOTO   0460 (RETURN)
0384:  BTFSC  FD8.1
0386:  BRA    038E
0388:  CLRF   FEA
038A:  MOVLW  2C
038C:  MOVWF  FE9
038E:  CLRF   00
0390:  CLRF   01
0392:  CLRF   02
0394:  CLRF   03
0396:  CLRF   2C
0398:  CLRF   2D
039A:  CLRF   2E
039C:  CLRF   2F
039E:  MOVF   2B,W
03A0:  IORWF  2A,W
03A2:  IORWF  29,W
03A4:  IORWF  28,W
03A6:  BZ    0400
03A8:  MOVLW  20
03AA:  MOVWF  30
03AC:  BCF    FD8.0
03AE:  RLCF   24,F
03B0:  RLCF   25,F
03B2:  RLCF   26,F
03B4:  RLCF   27,F
03B6:  RLCF   2C,F
03B8:  RLCF   2D,F
03BA:  RLCF   2E,F
03BC:  RLCF   2F,F
03BE:  MOVF   2B,W
03C0:  SUBWF  2F,W
03C2:  BNZ   03D4
03C4:  MOVF   2A,W
03C6:  SUBWF  2E,W
03C8:  BNZ   03D4
03CA:  MOVF   29,W
03CC:  SUBWF  2D,W
03CE:  BNZ   03D4
03D0:  MOVF   28,W
03D2:  SUBWF  2C,W
03D4:  BNC   03F4
03D6:  MOVF   28,W
03D8:  SUBWF  2C,F
03DA:  MOVF   29,W
03DC:  BTFSS  FD8.0
03DE:  INCFSZ 29,W
03E0:  SUBWF  2D,F
03E2:  MOVF   2A,W
03E4:  BTFSS  FD8.0
03E6:  INCFSZ 2A,W
03E8:  SUBWF  2E,F
03EA:  MOVF   2B,W
03EC:  BTFSS  FD8.0
03EE:  INCFSZ 2B,W
03F0:  SUBWF  2F,F
03F2:  BSF    FD8.0
03F4:  RLCF   00,F
03F6:  RLCF   01,F
03F8:  RLCF   02,F
03FA:  RLCF   03,F
03FC:  DECFSZ 30,F
03FE:  BRA    03AC
0400:  MOVFF  2C,FEF
0404:  MOVFF  2D,FEC
0408:  MOVFF  2E,FEC
040C:  MOVFF  2F,FEC
0410:  RETURN 0
0412:  MOVF   FE9,W
0414:  MOVWF  1C
0416:  MOVF   1B,W
0418:  MOVWF  1E
041A:  BZ    044E
041C:  MOVFF  1A,27
0420:  MOVFF  19,26
0424:  MOVFF  18,25
0428:  MOVFF  17,24
042C:  CLRF   2B
042E:  CLRF   2A
0430:  MOVLW  20
0432:  MOVWF  29
0434:  MOVLW  82
0436:  MOVWF  28
0438:  RCALL  0174
043A:  MOVFF  03,1A
043E:  MOVFF  02,19
0442:  MOVFF  01,18
0446:  MOVFF  00,17
044A:  DECFSZ 1E,F
044C:  BRA    041C
044E:  MOVFF  1A,27
0452:  MOVFF  19,26
0456:  MOVFF  18,25
045A:  MOVFF  17,24
045E:  BRA    0344
0460:  MOVFF  03,1A
0464:  MOVFF  02,19
0468:  MOVFF  01,18
046C:  MOVFF  00,17
0470:  BTFSS  1A.7
0472:  BRA    048E
0474:  DECF   1C,F
0476:  BSF    1C.5
0478:  COMF   17,F
047A:  COMF   18,F
047C:  COMF   19,F
047E:  COMF   1A,F
0480:  INCF   17,F
0482:  BTFSC  FD8.2
0484:  INCF   18,F
0486:  BTFSC  FD8.2
0488:  INCF   19,F
048A:  BTFSC  FD8.2
048C:  INCF   1A,F
048E:  MOVLW  3B
0490:  MOVWF  23
0492:  MOVLW  9A
0494:  MOVWF  22
0496:  MOVLW  CA
0498:  MOVWF  21
049A:  CLRF   20
049C:  MOVLW  0A
049E:  MOVWF  1E
04A0:  MOVF   1B,W
04A2:  BTFSC  FD8.2
04A4:  INCF   1C,F
04A6:  BSF    FD8.1
04A8:  CLRF   FEA
04AA:  MOVLW  17
04AC:  MOVWF  FE9
04AE:  MOVFF  1A,27
04B2:  MOVFF  19,26
04B6:  MOVFF  18,25
04BA:  MOVFF  17,24
04BE:  MOVFF  23,2B
04C2:  MOVFF  22,2A
04C6:  MOVFF  21,29
04CA:  MOVFF  20,28
04CE:  RCALL  0384
04D0:  MOVF   01,W
04D2:  MOVF   00,F
04D4:  BNZ   04F4
04D6:  INCF   1B,W
04D8:  SUBWF  1E,W
04DA:  BZ    04F4
04DC:  MOVF   1C,W
04DE:  BZ    04F8
04E0:  ANDLW  0F
04E2:  SUBWF  1E,W
04E4:  BZ    04E8
04E6:  BC    0556
04E8:  BTFSC  1C.7
04EA:  BRA    0556
04EC:  BTFSC  1C.6
04EE:  BRA    04F8
04F0:  MOVLW  20
04F2:  BRA    054E
04F4:  MOVLW  20
04F6:  ANDWF  1C,F
04F8:  BTFSS  1C.5
04FA:  BRA    0514
04FC:  BCF    1C.5
04FE:  MOVF   1B,W
0500:  BTFSS  FD8.2
0502:  DECF   1C,F
0504:  MOVF   00,W
0506:  MOVWF  1C
0508:  MOVLW  2D
050A:  MOVWF  24
050C:  RCALL  02BC
050E:  MOVF   1C,W
0510:  MOVWF  00
0512:  CLRF   1C
0514:  MOVF   1B,W
0516:  SUBWF  1E,W
0518:  BNZ   052E
051A:  MOVF   00,W
051C:  MOVWF  1C
051E:  MOVLW  2E
0520:  MOVWF  24
0522:  RCALL  02BC
0524:  MOVF   1C,W
0526:  MOVWF  00
0528:  MOVLW  20
052A:  ANDWF  1C,F
052C:  MOVLW  00
052E:  MOVLW  30
0530:  BTFSS  1C.5
0532:  BRA    054E
0534:  BCF    1C.5
0536:  MOVF   1B,W
0538:  BTFSS  FD8.2
053A:  DECF   1C,F
053C:  MOVF   00,W
053E:  MOVWF  1C
0540:  MOVLW  2D
0542:  MOVWF  24
0544:  RCALL  02BC
0546:  MOVF   1C,W
0548:  MOVWF  00
054A:  CLRF   1C
054C:  MOVLW  30
054E:  ADDWF  00,F
0550:  MOVFF  00,24
0554:  RCALL  02BC
0556:  BCF    FD8.1
0558:  MOVFF  23,27
055C:  MOVFF  22,26
0560:  MOVFF  21,25
0564:  MOVFF  20,24
0568:  CLRF   2B
056A:  CLRF   2A
056C:  CLRF   29
056E:  MOVLW  0A
0570:  MOVWF  28
0572:  RCALL  0384
0574:  MOVFF  03,23
0578:  MOVFF  02,22
057C:  MOVFF  01,21
0580:  MOVFF  00,20
0584:  DECFSZ 1E,F
0586:  BRA    04A6
0588:  RETURN 0
....................  
.................... #list 
....................  
.................... #Device ADC=10 
.................... #Use Delay(CLOCK=20M) 
*
003A:  CLRF   FEA
003C:  MOVLW  25
003E:  MOVWF  FE9
0040:  MOVF   FEF,W
0042:  BZ    005E
0044:  MOVLW  06
0046:  MOVWF  01
0048:  CLRF   00
004A:  DECFSZ 00,F
004C:  BRA    004A
004E:  DECFSZ 01,F
0050:  BRA    0048
0052:  MOVLW  7B
0054:  MOVWF  00
0056:  DECFSZ 00,F
0058:  BRA    0056
005A:  DECFSZ FEF,F
005C:  BRA    0044
005E:  RETURN 0
.................... #Fuses HS, NOWDT, NOPROTECT, PUT, BROWNOUT, NOLVP, NOMCLR 
.................... #USE Standard_IO(A) 
.................... #USE Standard_IO(B) 
.................... #USE Standard_IO(C) 
.................... #USE Standard_IO(D) 
....................  
.................... #Include <LCD420.c> // Libreria LCD 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
007E:  MOVLW  F0
0080:  MOVWF  F93
....................       lcd.rw = 1; 
0082:  BSF    F81.2
....................       delay_cycles(1); 
0084:  NOP   
....................       lcd.enable = 1; 
0086:  BSF    F81.0
....................       delay_cycles(1); 
0088:  NOP   
....................       high = lcd.data; 
008A:  SWAPF  F81,W
008C:  ANDLW  0F
008E:  MOVWF  2B
....................       lcd.enable = 0; 
0090:  BCF    F81.0
....................       delay_cycles(1); 
0092:  NOP   
....................       lcd.enable = 1; 
0094:  BSF    F81.0
....................       delay_us(1); 
0096:  BRA    0098
0098:  BRA    009A
009A:  NOP   
....................       low = lcd.data; 
009C:  SWAPF  F81,W
009E:  ANDLW  0F
00A0:  MOVWF  2A
....................       lcd.enable = 0; 
00A2:  BCF    F81.0
....................       set_tris_b(LCD_WRITE); 
00A4:  MOVLW  00
00A6:  MOVWF  F93
....................       return( (high<<4) | low); 
00A8:  SWAPF  2B,W
00AA:  MOVWF  00
00AC:  MOVLW  F0
00AE:  ANDWF  00,F
00B0:  MOVF   00,W
00B2:  IORWF  2A,W
00B4:  MOVWF  01
00B6:  GOTO   00BE (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0060:  SWAPF  2B,W
0062:  ANDLW  F0
0064:  MOVWF  00
0066:  MOVLW  0F
0068:  ANDWF  F81,W
006A:  IORWF  00,W
006C:  MOVWF  F81
....................       delay_cycles(1); 
006E:  NOP   
....................       lcd.enable = 1; 
0070:  BSF    F81.0
....................       delay_us(2); 
0072:  MOVLW  03
0074:  MOVWF  00
0076:  DECFSZ 00,F
0078:  BRA    0076
....................       lcd.enable = 0; 
007A:  BCF    F81.0
007C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
00BA:  BCF    F81.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
00BC:  BRA    007E
00BE:  MOVFF  01,2A
00C2:  BTFSC  01.7
00C4:  BRA    00BC
....................       lcd.rs = address; 
00C6:  BTFSS  28.0
00C8:  BCF    F81.1
00CA:  BTFSC  28.0
00CC:  BSF    F81.1
....................       delay_cycles(1); 
00CE:  NOP   
....................       lcd.rw = 0; 
00D0:  BCF    F81.2
....................       delay_cycles(1); 
00D2:  NOP   
....................       lcd.enable = 0; 
00D4:  BCF    F81.0
....................       lcd_send_nibble(n >> 4); 
00D6:  SWAPF  29,W
00D8:  MOVWF  2A
00DA:  MOVLW  0F
00DC:  ANDWF  2A,F
00DE:  MOVFF  2A,2B
00E2:  RCALL  0060
....................       lcd_send_nibble(n & 0xf); 
00E4:  MOVF   29,W
00E6:  ANDLW  0F
00E8:  MOVWF  2A
00EA:  MOVWF  2B
00EC:  RCALL  0060
00EE:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
00F0:  MOVLW  00
00F2:  MOVWF  F93
....................     lcd.rs = 0; 
00F4:  BCF    F81.1
....................     lcd.rw = 0; 
00F6:  BCF    F81.2
....................     lcd.enable = 0; 
00F8:  BCF    F81.0
....................     delay_ms(15); 
00FA:  MOVLW  0F
00FC:  MOVWF  25
00FE:  RCALL  003A
....................     for(i=1;i<=3;++i) { 
0100:  MOVLW  01
0102:  MOVWF  17
0104:  MOVF   17,W
0106:  SUBLW  03
0108:  BNC   011A
....................        lcd_send_nibble(3); 
010A:  MOVLW  03
010C:  MOVWF  2B
010E:  RCALL  0060
....................        delay_ms(5); 
0110:  MOVLW  05
0112:  MOVWF  25
0114:  RCALL  003A
0116:  INCF   17,F
0118:  BRA    0104
....................     } 
....................     lcd_send_nibble(2); 
011A:  MOVLW  02
011C:  MOVWF  2B
011E:  RCALL  0060
....................     for(i=0;i<=3;++i) 
0120:  CLRF   17
0122:  MOVF   17,W
0124:  SUBLW  03
0126:  BNC   013A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0128:  CLRF   03
012A:  MOVF   17,W
012C:  RCALL  0004
012E:  MOVWF  18
0130:  CLRF   28
0132:  MOVWF  29
0134:  RCALL  00BA
0136:  INCF   17,F
0138:  BRA    0122
013A:  GOTO   05A0 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0266:  MOVLW  01
0268:  SUBWF  26,W
026A:  ADDLW  FC
026C:  BC    028A
026E:  ADDLW  04
0270:  GOTO   029A
....................      case 1 : address=0x80;break; 
0274:  MOVLW  80
0276:  MOVWF  27
0278:  BRA    028A
....................      case 2 : address=0xc0;break; 
027A:  MOVLW  C0
027C:  MOVWF  27
027E:  BRA    028A
....................      case 3 : address=0x94;break; 
0280:  MOVLW  94
0282:  MOVWF  27
0284:  BRA    028A
....................      case 4 : address=0xd4;break; 
0286:  MOVLW  D4
0288:  MOVWF  27
....................    } 
....................    address+=x-1; 
028A:  MOVLW  01
028C:  SUBWF  25,W
028E:  ADDWF  27,F
....................    lcd_send_byte(0,address); 
0290:  CLRF   28
0292:  MOVFF  27,29
0296:  RCALL  00BA
0298:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
02BC:  MOVF   24,W
02BE:  XORLW  0C
02C0:  BZ    02CC
02C2:  XORLW  06
02C4:  BZ    02E0
02C6:  XORLW  02
02C8:  BZ    02EE
02CA:  BRA    02F8
....................      case '\f'   : lcd_send_byte(0,1); 
02CC:  CLRF   28
02CE:  MOVLW  01
02D0:  MOVWF  29
02D2:  RCALL  00BA
....................                    lcdline=1; 
02D4:  MOVLW  01
02D6:  MOVWF  04
....................                    delay_ms(2); 
02D8:  MOVLW  02
02DA:  MOVWF  25
02DC:  RCALL  003A
....................                                            break; 
02DE:  BRA    0302
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02E0:  INCF   04,F
02E2:  MOVLW  01
02E4:  MOVWF  25
02E6:  MOVFF  04,26
02EA:  RCALL  0266
02EC:  BRA    0302
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02EE:  CLRF   28
02F0:  MOVLW  10
02F2:  MOVWF  29
02F4:  RCALL  00BA
02F6:  BRA    0302
....................      default     : lcd_send_byte(1,c);     break; 
02F8:  MOVLW  01
02FA:  MOVWF  28
02FC:  MOVFF  24,29
0300:  RCALL  00BA
....................    } 
0302:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... Float s1,s2,s3,s4; // Variables de Sensores 
....................  
.................... Void Main (){ 
*
058A:  CLRF   FF8
058C:  BCF    FD0.7
058E:  CLRF   16
0590:  CLRF   15
0592:  MOVF   FC1,W
0594:  ANDLW  C0
0596:  IORLW  0F
0598:  MOVWF  FC1
059A:  MOVLW  07
059C:  MOVWF  FB4
....................    LCD_Init(); 
059E:  BRA    00F0
....................    Setup_ADC_Ports(AN0_TO_AN3); 
05A0:  MOVF   FC1,W
05A2:  ANDLW  C0
05A4:  IORLW  0B
05A6:  MOVWF  FC1
....................    Setup_ADC(ADC_Clock_Internal); 
05A8:  MOVF   FC0,W
05AA:  ANDLW  C0
05AC:  IORLW  07
05AE:  MOVWF  FC0
05B0:  BSF    FC0.7
05B2:  BSF    FC2.0
....................  
....................    While(1){ 
....................       Set_ADC_channel(0); 
05B4:  MOVLW  00
05B6:  MOVWF  01
05B8:  MOVF   FC2,W
05BA:  ANDLW  C3
05BC:  IORWF  01,W
05BE:  MOVWF  FC2
....................       Delay_us(10); 
05C0:  MOVLW  10
05C2:  MOVWF  00
05C4:  DECFSZ 00,F
05C6:  BRA    05C4
05C8:  NOP   
....................       s1 = Read_ADC()*0.55; 
05CA:  BSF    FC2.1
05CC:  BTFSC  FC2.1
05CE:  BRA    05CC
05D0:  MOVFF  FC4,03
05D4:  MOVFF  FC3,17
05D8:  MOVFF  FC4,18
05DC:  MOVFF  FC4,1A
05E0:  MOVFF  FC3,19
05E4:  RCALL  013E
05E6:  MOVFF  03,27
05EA:  MOVFF  02,26
05EE:  MOVFF  01,25
05F2:  MOVFF  00,24
05F6:  MOVLW  CD
05F8:  MOVWF  2B
05FA:  MOVLW  CC
05FC:  MOVWF  2A
05FE:  MOVLW  0C
0600:  MOVWF  29
0602:  MOVLW  7E
0604:  MOVWF  28
0606:  RCALL  0174
0608:  MOVFF  03,08
060C:  MOVFF  02,07
0610:  MOVFF  01,06
0614:  MOVFF  00,05
....................        
....................       Set_ADC_channel(1); 
0618:  MOVLW  04
061A:  MOVWF  01
061C:  MOVF   FC2,W
061E:  ANDLW  C3
0620:  IORWF  01,W
0622:  MOVWF  FC2
....................       Delay_us(10); 
0624:  MOVLW  10
0626:  MOVWF  00
0628:  DECFSZ 00,F
062A:  BRA    0628
062C:  NOP   
....................       s2 = Read_ADC()*0.44; 
062E:  BSF    FC2.1
0630:  BTFSC  FC2.1
0632:  BRA    0630
0634:  MOVFF  FC4,03
0638:  MOVFF  FC3,17
063C:  MOVFF  FC4,18
0640:  MOVFF  FC4,1A
0644:  MOVFF  FC3,19
0648:  RCALL  013E
064A:  MOVFF  03,27
064E:  MOVFF  02,26
0652:  MOVFF  01,25
0656:  MOVFF  00,24
065A:  MOVLW  AE
065C:  MOVWF  2B
065E:  MOVLW  47
0660:  MOVWF  2A
0662:  MOVLW  61
0664:  MOVWF  29
0666:  MOVLW  7D
0668:  MOVWF  28
066A:  RCALL  0174
066C:  MOVFF  03,0C
0670:  MOVFF  02,0B
0674:  MOVFF  01,0A
0678:  MOVFF  00,09
....................        
....................       Set_ADC_channel(2)*0.33; 
067C:  MOVLW  08
067E:  MOVWF  01
0680:  MOVF   FC2,W
0682:  ANDLW  C3
0684:  IORWF  01,W
0686:  MOVWF  FC2
0688:  CLRF   1A
068A:  MOVWF  19
068C:  RCALL  013E
068E:  MOVFF  03,27
0692:  MOVFF  02,26
0696:  MOVFF  01,25
069A:  MOVFF  00,24
069E:  MOVLW  C3
06A0:  MOVWF  2B
06A2:  MOVLW  F5
06A4:  MOVWF  2A
06A6:  MOVLW  28
06A8:  MOVWF  29
06AA:  MOVLW  7D
06AC:  MOVWF  28
06AE:  RCALL  0174
....................       Delay_us(10); 
06B0:  MOVLW  10
06B2:  MOVWF  00
06B4:  DECFSZ 00,F
06B6:  BRA    06B4
06B8:  NOP   
....................       s3 = Read_ADC(); 
06BA:  BSF    FC2.1
06BC:  BTFSC  FC2.1
06BE:  BRA    06BC
06C0:  MOVFF  FC4,03
06C4:  MOVFF  FC3,19
06C8:  MOVFF  FC4,1A
06CC:  RCALL  013E
06CE:  MOVFF  03,10
06D2:  MOVFF  02,0F
06D6:  MOVFF  01,0E
06DA:  MOVFF  00,0D
....................        
....................       Set_ADC_channel(3)*0.22; 
06DE:  MOVLW  0C
06E0:  MOVWF  01
06E2:  MOVF   FC2,W
06E4:  ANDLW  C3
06E6:  IORWF  01,W
06E8:  MOVWF  FC2
06EA:  CLRF   1A
06EC:  MOVWF  19
06EE:  RCALL  013E
06F0:  MOVFF  03,27
06F4:  MOVFF  02,26
06F8:  MOVFF  01,25
06FC:  MOVFF  00,24
0700:  MOVLW  AE
0702:  MOVWF  2B
0704:  MOVLW  47
0706:  MOVWF  2A
0708:  MOVLW  61
070A:  MOVWF  29
070C:  MOVLW  7C
070E:  MOVWF  28
0710:  RCALL  0174
....................       Delay_us(10); 
0712:  MOVLW  10
0714:  MOVWF  00
0716:  DECFSZ 00,F
0718:  BRA    0716
071A:  NOP   
....................       s4 = Read_ADC(); 
071C:  BSF    FC2.1
071E:  BTFSC  FC2.1
0720:  BRA    071E
0722:  MOVFF  FC4,03
0726:  MOVFF  FC3,19
072A:  MOVFF  FC4,1A
072E:  RCALL  013E
0730:  MOVFF  03,14
0734:  MOVFF  02,13
0738:  MOVFF  01,12
073C:  MOVFF  00,11
....................        
....................       LCD_Putc("\f"); 
0740:  MOVLW  18
0742:  MOVWF  FF6
0744:  MOVLW  00
0746:  MOVWF  FF7
0748:  BRA    0304
....................       LCD_Gotoxy(1,1); 
074A:  MOVLW  01
074C:  MOVWF  25
074E:  MOVWF  26
0750:  RCALL  0266
....................       Printf(LCD_Putc,"ADC: %f",s1); 
0752:  MOVLW  1A
0754:  MOVWF  FF6
0756:  MOVLW  00
0758:  MOVWF  FF7
075A:  MOVLW  05
075C:  MOVWF  17
075E:  RCALL  0326
0760:  MOVLW  89
0762:  MOVWF  FE9
0764:  MOVFF  08,1A
0768:  MOVFF  07,19
076C:  MOVFF  06,18
0770:  MOVFF  05,17
0774:  MOVLW  02
0776:  MOVWF  1B
0778:  RCALL  0412
....................       LCD_Gotoxy(1,2); 
077A:  MOVLW  01
077C:  MOVWF  25
077E:  MOVLW  02
0780:  MOVWF  26
0782:  RCALL  0266
....................       Printf(LCD_Putc,"ADC: %f",s2); 
0784:  MOVLW  22
0786:  MOVWF  FF6
0788:  MOVLW  00
078A:  MOVWF  FF7
078C:  MOVLW  05
078E:  MOVWF  17
0790:  RCALL  0326
0792:  MOVLW  89
0794:  MOVWF  FE9
0796:  MOVFF  0C,1A
079A:  MOVFF  0B,19
079E:  MOVFF  0A,18
07A2:  MOVFF  09,17
07A6:  MOVLW  02
07A8:  MOVWF  1B
07AA:  RCALL  0412
....................        LCD_Gotoxy(1,3); 
07AC:  MOVLW  01
07AE:  MOVWF  25
07B0:  MOVLW  03
07B2:  MOVWF  26
07B4:  RCALL  0266
....................       Printf(LCD_Putc,"ADC: %f",s3); 
07B6:  MOVLW  2A
07B8:  MOVWF  FF6
07BA:  MOVLW  00
07BC:  MOVWF  FF7
07BE:  MOVLW  05
07C0:  MOVWF  17
07C2:  RCALL  0326
07C4:  MOVLW  89
07C6:  MOVWF  FE9
07C8:  MOVFF  10,1A
07CC:  MOVFF  0F,19
07D0:  MOVFF  0E,18
07D4:  MOVFF  0D,17
07D8:  MOVLW  02
07DA:  MOVWF  1B
07DC:  RCALL  0412
....................       LCD_Gotoxy(1,4); 
07DE:  MOVLW  01
07E0:  MOVWF  25
07E2:  MOVLW  04
07E4:  MOVWF  26
07E6:  RCALL  0266
....................       Printf(LCD_Putc,"ADC: %f",s4); 
07E8:  MOVLW  32
07EA:  MOVWF  FF6
07EC:  MOVLW  00
07EE:  MOVWF  FF7
07F0:  MOVLW  05
07F2:  MOVWF  17
07F4:  RCALL  0326
07F6:  MOVLW  89
07F8:  MOVWF  FE9
07FA:  MOVFF  14,1A
07FE:  MOVFF  13,19
0802:  MOVFF  12,18
0806:  MOVFF  11,17
080A:  MOVLW  02
080C:  MOVWF  1B
080E:  RCALL  0412
....................       Delay_ms(100);   
0810:  MOVLW  64
0812:  MOVWF  25
0814:  RCALL  003A
0816:  BRA    05B4
....................    } 
.................... } 
0818:  SLEEP 

Configuration Fuses:
   Word  1: CC3F   PLL12 CPUDIV4 USBDIV HS FCMEN IESO
   Word  2: 1E26   PUT BROWNOUT VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
